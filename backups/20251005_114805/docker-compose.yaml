networks:
  devnet: {}

volumes:
  db_data:
  grafana_data:
  loki_data:
  promtail_positions:

services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: secretpassword
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d appdb -h localhost"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 5s
    networks: [devnet]
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    environment:
      # مهم: داخل داکر به سرویس db وصل می‌شویم، نه localhost
      DATABASE_URL: postgresql+psycopg2://appuser:secretpassword@db:5432/appdb
      APP_ENV: dev
      # Ensure src.settings.database_url() resolves correctly inside container
      POSTGRES_HOST: db
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: secretpassword
      POSTGRES_DB: appdb
      POSTGRES_PORT: "5432"
    depends_on:
      db:
        condition: service_healthy
    networks: [devnet]
    labels:
      # Enable Traefik for this service
      traefik.enable: "true"
      # Define router to expose /health on entrypoint "web" (port 8088)
      traefik.http.routers.api-health.rule: Path(`/health`)
      traefik.http.routers.api-health.entrypoints: web
      # Point Traefik service to the container's internal port 8000
      traefik.http.services.api.loadbalancer.server.port: "8000"
    restart: unless-stopped

  traefik:
    image: traefik:v2.11
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:8088
      - --accesslog=true
      - --log.level=INFO
    ports:
      - "8088:8088"
    networks: [devnet]
    depends_on:
      - api
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.55.1
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks: [devnet]
    depends_on:
      - api
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.2.2
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    ports:
      - "3000:3000"
    networks: [devnet]
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.0
    command: ["-config.file=/etc/loki/config.yaml"]
    volumes:
      - loki_data:/loki
      - ./monitoring/grafana/provisioning/monitoring/loki-config.yaml:/etc/loki/config.yaml:ro
    ports:
      - "3100:3100"
    networks: [devnet]
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.4
    command: ["-config.file=/etc/promtail/config.yaml"]
    volumes:
      - ./monitoring/grafana/provisioning/monitoring/monitoring/promtail-config.yaml:/etc/promtail/config.yaml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - promtail_positions:/tmp
    networks: [devnet]
    depends_on:
      - loki
    restart: unless-stopped